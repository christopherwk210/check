{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.ts","src/core/Game.ts","src/core/game-object/GameObject.ts","src/core/game-object/index.ts","src/core/graphics/Graphics.ts","src/core/graphics/index.ts","src/core/index.ts","src/core/input-manager/InputManager.ts","src/core/input-manager/index.ts","src/core/sprites/Sprite.ts","src/core/sprites/defaultCharacterMap.ts","src/core/sprites/index.ts","src/core/utils/defaultGameObjectOptions.ts","src/core/utils/defaultGameOptions.ts","src/core/utils/getElementPosition.ts","src/core/utils/index.ts","src/polyfills/index.ts","src/polyfills/requestAnimationFrame.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","core_1","Check","Game","Sprite","Graphics","GameObject","InputManager","global","utils_1","graphics_1","input_manager_1","element","options","defaultGameOptions","this","_gameBoardObjects","_checkboxDimens","width","height","_instance_id","_currentTime","Date","getTime","_lastTime","_deltaTime","TypeError","_element","_width","_height","_collapse","collapse","_hideCursor","hideCursor","_update","update","_useRadio","useRadio","_gameBoard","_createGameBoard","_gameBoardContainer","_bootstrapGameBoard","_graphics","_inputManager","prototype","_createCheckboxElement","id","css","checkbox","document","createElement","type","style","cssText","addEventListener","preventDefault","gameBoard","currentRow","x_1","y","checkboxStyle","push","_this","gameBoardElement","forEach","row","gameBoardRowElement","appendChild","offsetWidth","offsetHeight","_gameUpdate","_clearBoard","instance","object","_draw","draw","requestAnimationFrame","bind","boardRow","checked","addObjectToBoard","_init","removeObjectFromBoard","removePosition","index","_destroy","splice","getObjectById","found","Object","defineProperty","game","defaultGameObjectOptions","_game","_x","x","_y","_sprite","sprite","init","destroy","_checkRectanglesIntersecting","rect1","rect2","checkCollision","checkCollisionPoint","otherObject","precise","spriteData","origin","_drawBatch","drawPoint","Math","floor","drawSprite","points","__export","boardWidth","boardHeight","checkboxDimens","_currentMouseCoords","_currentKeys","_gameBoardElement","_boardHeight","_boardWidth","_bindMouseMovement","_bindKeyboardInput","elementPosition","getElementPosition","roundedX","round","pageX","left","roundedY","pageY","top","max","min","body","which","down","ascii","key","charCodeAt","isKeyDown","keycode","defaultCharacterMap_1","_spriteData","normalizeSpriteData","_precise","pointRow","text","str","characterMap","defaultCharacterMap","textSpriteData","len","charPoints","characters","charRow","concat","spacings","slice","fixedPoints","newRow","point","arr","inverse","inverseSpriteData","lowerCaseAlpha","b","c","d","g","h","j","k","m","p","q","v","w","z","upperCaseAlpha","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","numbers","0","2","3","4","5","6","7","8","9","symbols"," ",",",".","/",";","'","[","]","\\","-","=","<",">","?",":","\"","{","}","|","!","@","#","$","%","^","&","*","(",")","_","+","`","~","spacing","__assign","undefined","graphics","curLeft","curTop","offsetLeft","offsetTop","offsetParent","lastTime","vendors","cancelAnimationFrame","callback","currTime","timeToCall","setTimeout","clearTimeout"],"mappings":"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CN,EAAG,EAAG,IACN,IACA,EAAG,EAAG,IACN,EAAG,EAAG,IAETC,IACG,KACC,EAAG,KACH,EAAG,EAAG,IACP,EAAG,GAAI,IACP,KAICC,GACJC,IACG,EAAG,EAAG,IACN,GAAI,EAAG,IACP,GAAI,EAAG,IACP,GAAI,EAAG,IACP,EAAG,EAAG,IAETpN,IACG,EAAG,EAAG,IACN,EAAG,IACH,EAAG,EAAG,IACN,EAAG,EAAG,IACN,IAEHqN,IACG,EAAG,EAAG,IACN,GAAI,EAAG,KACN,EAAG,EAAG,IACP,EAAG,GAAI,IACP,IAEHC,IACG,KACC,EAAG,IACJ,EAAG,KACF,EAAG,IACJ,IAEHC,IACG,GAAI,EAAG,IACP,GAAI,EAAG,IACP,KACC,EAAG,KACH,EAAG,IAEPC,IACG,IACA,GAAI,IACJ,EAAG,KACF,EAAG,IACJ,IAEHC,IACG,IACA,GAAI,IACJ,IACA,GAAI,EAAG,IACP,IAEHC,IACG,KACC,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,IAEPC,IACG,IACA,GAAI,EAAG,IACP,IACA,GAAI,EAAG,IACP,IAEHC,IACG,IACA,GAAI,EAAG,IACP,KACC,EAAG,KACH,EAAG,KAIHC,GACJC,OACI,KACA,KACA,KACA,KACA,IAEJC,OACI,KACA,KACA,IACD,EAAG,IACH,IAEHC,MACG,IACA,IACA,IACA,IACA,IAEHC,OACI,EAAG,KACH,EAAG,IACJ,EAAG,GAAI,IACP,GAAI,IACJ,GAAI,IAEPC,OACI,IACD,EAAG,KACF,IACD,EAAG,IACH,EAAG,IAENC,MACG,IACA,IACA,IACA,IACA,IAEHC,MACG,IACA,EAAG,IACH,EAAG,IACH,EAAG,IACH,IAEHC,MACG,IACA,EAAG,IACH,EAAG,IACH,EAAG,IACH,IAEHC,OACG,GAAI,IACJ,GAAI,IACJ,EAAG,GAAI,KACN,EAAG,KACH,EAAG,IAEPC,OACI,KACA,IACD,KACC,KACA,IAEJC,OACI,IACD,KACC,IACD,KACC,IAEJC,OACI,EAAG,IACJ,EAAG,EAAG,IACN,GAAI,IACJ,EAAG,EAAG,KACL,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","file":"Check.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import './polyfills';\n\nimport { Game, Sprite, Graphics, GameObject, InputManager } from './core';\n\ndeclare var global:any;\n\nlet Check:any = {\n  Game: Game,\n  Sprite: Sprite,\n  Graphics: Graphics,\n  GameObject: GameObject,\n  InputManager: InputManager\n};\n\nglobal.Check = Check;","import { defaultGameOptions } from './utils';\nimport { Graphics } from './graphics';\nimport { GameObject } from './game-object';\nimport { InputManager } from './input-manager';\n\ndeclare var global:any;\n\n/**\n * Game class, responsible for creating the game and managing draws.\n */\nexport class Game {\n\n  /** Options */\n\n  _element: Element;\n  _width: number;\n  _height: number;\n  _collapse: boolean;\n  _hideCursor: boolean;\n  _update: Function;\n  _useRadio: boolean;\n\n  /** Game board control */\n\n  _gameBoard: Array<any>;\n  _gameBoardContainer: Element;\n  _gameBoardObjects: Array<any> = [];\n  _checkboxDimens: any = { width: 0, height: 0 };\n\n  /** Instance control */\n\n  _instance_id: number = 0;\n\n  /** Timing control */\n\n  _currentTime: number = (new Date()).getTime();\n  _lastTime: number = (new Date()).getTime();\n  _deltaTime: number = 0;\n\n  /** Internal class refs */\n\n  _graphics: Graphics;\n  _inputManager: InputManager;\n\n  /**\n   * Initializes the game and appends game board to the DOM.\n   * @param {Element} element Existing element to append the game board to.\n   * @param {Object} [options] Game setup information. \n   * @param {number} [options.width=15] How many checkboxes wide the game board should be.\n   * @param {number} [options.height=15] How many checkboxes high the game board should be.\n   * @param {boolean} [options.collapse=false] Whether the checkboxes should have margins.\n   * @param {boolean} [options.hideCursor=false] Hide the cursor over the game board.\n   * @param {Function} [options.update=function(){}] Function to execute every game frame before all other calculations.\n   * @param {boolean} [options.useRadio=false] Use radio buttons instead of checkboxes.\n   */\n  constructor(element: Element, options: any = defaultGameOptions) {\n    if (!element) { throw new TypeError('You must provide an element to a Check Game.'); }\n\n    /** Assign options */\n    this._element = element;\n    this._width = options.width || defaultGameOptions.width;\n    this._height = options.height || defaultGameOptions.height;\n    this._collapse = options.collapse || defaultGameOptions.collapse;\n    this._hideCursor = options.hideCursor || defaultGameOptions.hideCursor;\n    this._update = options.update || defaultGameOptions.update;\n    this._useRadio = options.useRadio || defaultGameOptions.useRadio;\n\n    /** Set up the game board */\n    this._gameBoard = this._createGameBoard(this._width, this._height);\n    this._gameBoardContainer = this._bootstrapGameBoard(this._element, this._gameBoard);\n\n    /** Set up graphics */\n    this._graphics = new Graphics(this._width, this._height, this._gameBoard);\n\n    /** Set up input manager */\n    this._inputManager = new InputManager(this._gameBoardContainer, this._width, this._height, this._checkboxDimens);\n  }\n\n  /**\n   * Creates a checkbox element ready to be used by Check.\n   * @param {string} [id] ID to assign to the element.\n   * @param {string} [css] CSS text to assign to the element.\n   * @returns {Element} Checkbox element.\n   */\n  _createCheckboxElement(id:string = '', css:string = ''):Element {\n    let checkbox = document.createElement('input');\n    \n    /** Set up element properties */\n    checkbox.type = this._useRadio ? 'radio' : 'checkbox';\n    checkbox.id = id;\n    checkbox.style.cssText = css;\n\n    /** Prevent default user interactions */\n    checkbox.addEventListener('click', e => {\n      e.preventDefault();\n    });\n    checkbox.addEventListener('keydown', e => {\n      e.preventDefault();\n    });\n\n    return checkbox;\n  }\n\n  /**\n   * Returns a grid of checkboxes.\n   * @param {number} width How many checkboxes wide the game board should be.\n   * @param {number} height How many checkboxes high the game board should be.\n   * @returns {Array} The game board array of checkbox elements.\n   */\n  _createGameBoard(width:number, height:number):Array<any> {\n    let gameBoard = [];\n    let currentRow = [];\n\n    for (let x = 0; x < height; x++) {\n      currentRow = [];\n      for (let y = 0; y < width; y++) {\n        let checkboxStyle = (this._hideCursor ? 'cursor:none;' : '') + (this._collapse ? 'padding:0;margin:0;' : '');\n        let checkbox = this._createCheckboxElement(`${x}-${y}`, checkboxStyle);\n        currentRow.push(checkbox);\n      }\n      gameBoard.push(currentRow);\n    }\n\n    return gameBoard;\n  }\n\n  /**\n   * Appends a board to an element on the DOM.\n   * @param {Element} element DOM element to append game board to.\n   * @param {Array} gameBoard Valid game board grid.\n   * @returns {Element} The containing game board div.\n   */\n  _bootstrapGameBoard(element: Element, gameBoard: Array<any>):Element {\n    let gameBoardElement = document.createElement('div');\n    gameBoardElement.style.cssText = 'display:inline-block;' + (this._hideCursor ? 'cursor:none;' : '');\n\n    /** Create the game board rows */\n    gameBoard.forEach(row => {\n      let gameBoardRowElement = document.createElement('div');\n      gameBoardRowElement.style.cssText = this._collapse ? 'line-height: 0.5em;' : '';\n\n      row.forEach((checkbox:Element) => {\n        gameBoardRowElement.appendChild(checkbox);\n      });\n      \n      gameBoardElement.appendChild(gameBoardRowElement);\n    });\n\n    /** Add the game board to the DOM */\n    element.appendChild(gameBoardElement);\n\n    /** Determine checkbox size */\n    this._checkboxDimens.width = this._gameBoard[0][0].offsetWidth;\n    this._checkboxDimens.height = this._gameBoard[0][0].offsetHeight;\n\n    return gameBoardElement;\n  }\n\n  /**\n   * Main game loop.\n   */\n  _gameUpdate() {\n    /** Calculate delta time */\n    this._currentTime = (new Date()).getTime();\n    this._deltaTime = (this._currentTime - this._lastTime);\n    \n    /** Clear the game board */\n    this._clearBoard();\n\n    /** Process game object logics */\n    this._update();\n    this._gameBoardObjects.forEach(instance => instance.object._update(instance.id));\n\n    /** Process drawing */\n    this._gameBoardObjects.forEach(instance => instance.object._draw(instance.id, this._graphics));    \n    this._graphics.draw();\n\n    /** Loop */\n    this._lastTime = this._currentTime;\n    global.requestAnimationFrame(this._gameUpdate.bind(this));\n  }\n\n  /**\n   * Unchecks all checkboxes on the game board.\n   */\n  _clearBoard() {\n    this._gameBoard.forEach(boardRow => {\n      boardRow.forEach((checkbox:any) => {\n        checkbox.checked = false;\n      });\n    });\n  }\n\n  /**\n   * Adds a game object to the game board!\n   * @param {GameObject} object Game object to add to board.\n   * @returns {number} The object instance id.\n   */\n  addObjectToBoard(object: GameObject) {\n    this._instance_id++;\n\n    //** Append it to the board */\n    this._gameBoardObjects.push({\n      id: this._instance_id,\n      object: object\n    });\n\n    //** Call the object's init function */\n    object._init(this._instance_id);\n\n    return this._instance_id;\n  }\n\n  /**\n   * Removes a game object from the board.\n   * @param {number} id The object instance id to remove.\n   */\n  removeObjectFromBoard(id: number) {\n    let removePosition: number = 0;\n\n    /** Find the instance */\n    this._gameBoardObjects.forEach((instance, index) => {\n      if (instance.id === id) {\n\n        /** Run destroy code */\n        instance.object._destroy();\n        removePosition = index;\n      }\n    });\n\n    /** DELETE ALL PICTURES OF RON */\n    this._gameBoardObjects.splice(removePosition, 1);\n  }\n\n  /**\n   * Returns a game object with the give id, or -1 if none were found.\n   * @param {number} id Id of the object to get.\n   * @returns {GameObject|number} The found game object or -1.\n   */\n  getObjectById(id: number):GameObject|number {\n    let found:any = -1;\n\n    /** Find the instance */\n    this._gameBoardObjects.forEach((instance, index) => {\n      if (instance.id === id) {\n        found = instance;\n      }\n    });\n\n    return found;\n  }\n\n  /**\n   * Kicks off the main game loop!\n   */\n  get start() {\n    return this._gameUpdate;\n  }\n\n  /**\n   * Returns the delta time of the game loop.\n   * @returns {number} Delta time.\n   */\n  get deltaTime():number { return this._deltaTime; }\n\n  set deltaTime(a) { throw new Error('Delta time is a readonly property.'); }\n\n  /**\n   * Returns the width of the game board.\n   * @returns {number} Game board width.\n   */\n  get width():number { return this._width; }\n\n  set width(a) { throw new Error('Width is a readonly property.'); }\n\n  /**\n   * Returns the height of the game board.\n   * @returns {number} Game board height.\n   */\n  get height():number { return this._height; }\n\n  set height(a) { throw new Error('Height is a readonly property.'); }\n\n  /**\n   * Returns the graphics reference.\n   * @returns {Graphics} Graphics object reference.\n   */\n  get graphics():Graphics { return this._graphics; }\n\n  set graphics(a) { throw new Error('Graphics is a readonly property.'); }\n\n  /**\n   * Returns the input manager reference.\n   * @returns {InputManager} Input manager object reference.\n   */\n  get input():InputManager { return this._inputManager; }\n\n  set input(a) { throw new Error('Input is a readonly property.'); }\n}","import { Game } from '../';\nimport { Sprite } from '../sprites';\nimport { defaultGameObjectOptions } from '../utils';\n\n/**\n * This class represents an in game \"object\" or \"entity\".\n */\nexport class GameObject {\n\n  /** Options */\n\n  _game: Game;\n  _x: number;\n  _y: number;\n  _sprite: Sprite;\n  _init: Function;\n  _update: Function;\n  _draw: Function;\n  _destroy: Function;\n\n  /**\n   * Instantiates a new game object with a Game class reference.\n   * @param {Game} game Reference to the Game class.\n   * @param {Object} [options] Game options object.\n   * @param {number} [options.x=0] // The starting X position of the game object on the board.\n   * @param {number} [options.y=0] // The starting Y position of the game object on the board.\n   * @param {Sprite} [sprite] // The sprite that belongs to the game object.\n   * @param {Function} [init] // Function to call when the game object is first added to the game board.\n   * @param {Function} [update] // Function to call every game frame.\n   * @param {Function} [draw=selfDrawFunction(id, graphics)] // Function that is called at the end of every game frame, and is passed a reference to the graphics class.\n   * @param {Function} [destroy] // Function to call when the game object is removed from the board.\n   */\n  constructor(game: Game, options:any = defaultGameObjectOptions) {\n    if (!game) { throw new TypeError('You must provide a Game reference.'); }\n\n    /** Assign options */\n    this._game = game;\n    this._x = options.x || defaultGameObjectOptions.x;\n    this._y = options.y || defaultGameObjectOptions.y;\n    this._sprite = options.sprite || defaultGameObjectOptions.sprite;\n    this._init = options.init || defaultGameObjectOptions.init;\n    this._update = options.update || defaultGameObjectOptions.update;\n    this._draw = options.draw || defaultGameObjectOptions.draw;\n    this._destroy = options.destroy || defaultGameObjectOptions.destroy;\n  }\n\n    /**\n   * Tests for collision between two rectangles.\n   * @param {Object} rect1 The first rectangle.\n   * @param {number} rect1.x rect1 X position.\n   * @param {number} rect1.y rect1 Y position.\n   * @param {number} rect1.width rect1 width.\n   * @param {number} rect1.height rect1 height.\n   * @param {Object} rect2 The second rectangle.\n   * @param {number} rect2.x rect2 X position.\n   * @param {number} rect2.y rect2 Y position.\n   * @param {number} rect2.width rect2 width.\n   * @param {number} rect2.height rect2 height.\n   * @returns {boolean} If there is a collision.\n   */\n  _checkRectanglesIntersecting(rect1:any, rect2:any):boolean {\n    if (rect1.x < rect2.x + rect2.width &&\n      rect1.x + rect1.width > rect2.x &&\n      rect1.y < rect2.y + rect2.height &&\n      rect1.height + rect1.y > rect2.y) {\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Tests for a collision with another game object.\n   * @param {GameObject|number} object Game object or object ID to check collision with.\n   * @returns {boolean} Whether or not there is a collision.\n   */\n  checkCollision(object:any):boolean {\n    return this.checkCollisionPoint(object, this.x, this.y);\n  }\n\n  /**\n   * Tests for a collision with another game object if the current game object was in a different position.\n   * @param {GameObject|number} object Game object or object ID to check collision with.\n   * @param {number} x X position.\n   * @param {number} y Y position.\n   * @returns {boolean} Whether or not there is a collision.\n   */\n  checkCollisionPoint(object:any, x:number, y:number) {\n    let otherObject:any;\n\n    /** If an ID is provided, find the object */\n    if (typeof(object) === 'number') {\n      let found = this._game.getObjectById(object);\n      if (found === -1) {\n        return false;\n      } else {\n        otherObject = found;\n      }\n    } else {\n      otherObject = object;\n    }\n\n    //TODO: Add precise collision checking\n    if (!otherObject.sprite.precise) {\n      return this._checkRectanglesIntersecting({\n        x: x - this.sprite.spriteData.origin.x,\n        y: y - this.sprite.spriteData.origin.y,\n        width: this.sprite.width,\n        height: this.sprite.height\n      }, {\n        x: otherObject.x - otherObject.sprite.spriteData.origin.x,\n        y: otherObject.y - otherObject.sprite.spriteData.origin.y,\n        width: otherObject.sprite.width,\n        height: otherObject.sprite.height\n      });\n    }\n  }\n\n  /** Property getters/setters */\n\n  set x(x:number) { this._x = x; }\n  get x() { return this._x; }\n  set y(y:number) { this._y = y; }\n  get y() { return this._y; }\n  set sprite(sprite:Sprite) { this._sprite = sprite; }\n  get sprite() { return this._sprite; }\n}","export * from './GameObject';","import { Sprite } from '../sprites';\n\n/**\n * Contains graphical/drawing related functions.\n */\nexport class Graphics {\n\n  _drawBatch: Array<any> = [];\n\n  /** Options */\n\n  _width: number;\n  _height: number;\n  _gameBoard: Array<Array<HTMLInputElement>>;\n\n  /**\n   * Initialize the graphics class with game board properties.\n   * @param {number} width Width of the game board.\n   * @param {number} height Height of the game board.\n   * @param {Array<Array<HTMLInputElement>>} gameBoard Game board.\n   */\n  constructor(width:number, height:number, gameBoard:Array<Array<HTMLInputElement>>) {\n    this._width = width;\n    this._height = height;\n    this._gameBoard = gameBoard;\n  }\n\n  /**\n   * Processes the draw batch to check/uncheck all checkboxes on the game board.\n   */\n  draw() {\n    this._drawBatch.forEach(call => {\n      if ((call.y >= 0) && (call.x >= 0)) {\n        if (call.y < this._gameBoard.length) {\n          if (call.x < this._gameBoard[call.y].length) {\n            this._gameBoard[call.y][call.x].checked = true;\n          }\n        }\n      }\n    });\n    this._drawBatch = [];\n  }\n\n  /**\n   * Draws a point on the game board.\n   * @param {number} x X coordinate of the point.\n   * @param {number} y Y coordinate of the point.\n   */\n  drawPoint(x:number, y:number) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n\n    this._drawBatch.push({\n      x: x,\n      y: y\n    });\n  }\n\n  /**\n   * Draws a sprite on the game board.\n   * @param {Sprite} sprite Sprite to draw.\n   * @param {number} x X coordinate to draw the sprite.\n   * @param {number} y Y coordinate to draw the sprite.\n   */\n  drawSprite(sprite:Sprite, x:number, y:number) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n\n    for (let _x = 0; _x < sprite.width; _x++) {\n      for (let _y = 0; _y < sprite.height; _y++) {\n        let point = sprite.spriteData.points[_y][_x];\n        if (point === 1) {\n          this._drawBatch.push({\n            x: x + _x - sprite.spriteData.origin.x,\n            y: y + _y - sprite.spriteData.origin.y\n          });\n        }\n      }\n    }\n  }\n}","export * from './Graphics';","export * from './Game';\nexport * from './sprites';\nexport * from './graphics';\nexport * from './input-manager';\nexport * from './game-object';","import { getElementPosition } from '../utils';\n\n/**\n * InputManager class, handles all user input.\n */\nexport class InputManager {\n\n  /** Board control */\n\n  _gameBoardElement: Element;\n  _boardWidth: number;\n  _boardHeight: number;\n  _checkboxDimens: any;\n\n  /** Mouse control */\n\n  _currentMouseCoords:any = { x: 0, y: 0 };\n\n  /** Keyboard control */\n\n  _currentKeys:any = {};\n\n  /**\n   * Set up the input manager to listen to user input.\n   * @param {Element} gameBoardElement A reference to the game board container.\n   * @param {number} boardWidth Width of the game board.\n   * @param {number} boardHeight Height of the game board.\n   * @param {any} checkboxDimens Object that represents the dimensions in pixels of a checkbox.\n   */\n  constructor(gameBoardElement: Element, boardWidth: number, boardHeight: number, checkboxDimens: any) {\n    this._gameBoardElement = gameBoardElement;\n    this._boardHeight = boardHeight;\n    this._boardWidth = boardWidth;\n    this._checkboxDimens = checkboxDimens;\n\n    /** Set up mouse tracking */\n    this._bindMouseMovement();\n\n    /** Set up keboard tracking */\n    this._bindKeyboardInput();\n  }\n\n  /**\n   * Adds an event listener to the game board that tracks mouse movement.\n   */\n  _bindMouseMovement() {\n    /** Listen for mouse movements */\n    this._gameBoardElement.addEventListener('mousemove', (e:MouseEvent) => {\n      let elementPosition = getElementPosition(this._gameBoardElement);\n\n      //** Convert mouse position to grid position */\n      let roundedX = Math.round((e.pageX - elementPosition.left) / this._checkboxDimens.width);\n      let roundedY = Math.round((e.pageY - elementPosition.top) / this._checkboxDimens.height);\n\n      //** Clamp position to be within the board */\n      this._currentMouseCoords.x = Math.max(0, Math.min(roundedX, this._boardWidth - 1));\n      this._currentMouseCoords.y = Math.max(0, Math.min(roundedY, this._boardHeight - 1));\n    });\n  }\n\n  /**\n   * Binds keyboard input to the body object and keeps track of what\n   * keys are being pressed.\n   */\n  _bindKeyboardInput() {\n    /** Add keydown listener */\n    document.body.addEventListener('keydown', e => {\n      this._currentKeys[e.which] = this._currentKeys[e.which] || {};\n      this._currentKeys[e.which].down = true;\n    });\n\n    /** Add keyup listener */\n    document.body.addEventListener('keyup', e => {\n      this._currentKeys[e.which] = this._currentKeys[e.which] || {};\n      this._currentKeys[e.which].down = false;\n    });\n  }\n\n  /**\n   * Returns the ascii code of the character in the first position of\n   * a given string.\n   * @param {string} key String containing the character you want the ascii code of.\n   */\n  static ascii(key:string) {\n    return key.charCodeAt(0);\n  }\n\n  /**\n   * Returns if a key with the provided code is currently being held.\n   * @param {number} keycode Keycode of the key you want to check.\n   */\n  isKeyDown(keycode:number) {\n    return this._currentKeys[keycode] ? this._currentKeys[keycode].down : false;\n  }\n\n  /**\n   * Returns the position of the mouse.\n   */\n  get mousePosition():any {\n    return this._currentMouseCoords;\n  }\n}","export * from './InputManager';","import { SpriteData } from './spriteData.interface'; \nimport { defaultCharacterMap } from './defaultCharacterMap';\n\n/**\n * Sprite class, represents a graphical asset usable by the game.\n */\nexport class Sprite {\n\n  /** Options */\n  \n  _spriteData: SpriteData;\n  _precise: boolean;\n\n  /** Properties */\n  \n  _width: number = 0;\n  _height: number = 0;\n\n  /**\n   * \n   * @param {SpriteData} spriteData Sprite data that defines the appearance of the sprite.\n   * @param {boolean} [precise=false] Use precise collision checking.\n   */\n  constructor(spriteData:SpriteData, precise:boolean = false) {\n    this._spriteData = Sprite.normalizeSpriteData(spriteData);\n    this._precise = precise;\n\n    /** Assign default origin */\n    if (!this._spriteData.origin) { this._spriteData.origin = { x:0, y:0 }; }    \n\n    /** Calculate the width and height of the sprite */\n    this._spriteData.points.forEach(pointRow => {\n      this._width = pointRow.length > this._width ? pointRow.length : this._width;\n      this._height++;\n    });\n  }\n\n  /**\n   * Returns sprite data of text characters.\n   * @param {string} str Text to use.\n   * @param {Object} characterMap Character map to use.\n   * @returns {SpriteData} Constructed sprite data.\n   */\n  static text(str:string, characterMap=defaultCharacterMap):SpriteData {\n    let textSpriteData:SpriteData = { points: [] };\n\n    for (var i = 0, len = str.length; i < len; i++) {\n      let charPoints = characterMap.characters[str[i]];\n      if (charPoints) {\n        charPoints.forEach((charRow:any, index:number) => {\n          if (textSpriteData.points[index]) {\n            textSpriteData.points[index] = [\n              ...textSpriteData.points[index],\n              -characterMap.options.spacings,\n              ...charRow\n            ];\n          } else {\n            textSpriteData.points[index] = [\n              ...charRow\n            ];\n          }\n        });\n      }\n    }\n\n    textSpriteData.origin = {\n      x: 0,\n      y: 0\n    };\n\n    return this.normalizeSpriteData(textSpriteData);\n  }\n\n  /**\n   * Normalizes shorthand sprite data.\n   * @param {SpriteData} spriteData Sprite data to normalize\n   */\n  static normalizeSpriteData(spriteData:SpriteData):SpriteData {\n    let fixedPoints:Array<Array<number>> = [];\n\n    spriteData.points.forEach(pointRow => {\n      let newRow:Array<number> = [];\n      pointRow.forEach((point, index, arr) => {\n        if (point < 0) {\n          for (let i = 0; i < (point * -1); i++) {\n            newRow.push(0);\n          }\n        } else if (point > 1) {\n          for (let i = 0; i < point; i++) {\n            newRow.push(1);\n          }\n        } else {\n          newRow.push(point);\n        }\n      });\n      fixedPoints.push(newRow);\n    });\n\n    let normalizedSprite:SpriteData = {\n      points: fixedPoints,\n      origin: spriteData.origin\n    };\n\n    return normalizedSprite;\n  }\n\n  /**\n   * Returns the inverse of given sprite data.\n   * @param {SpriteData} spriteData The sprite data you wish to inverse.\n   */\n  static inverse(spriteData:SpriteData):SpriteData {\n    let inverseSpriteData:SpriteData = spriteData;\n\n    inverseSpriteData.points.forEach(pointRow => {\n      pointRow.forEach((point, index, arr) => {\n        if ((point > 1) || (point < 0)) {\n          arr[index] = point * -1;\n        } else {\n          arr[index] = point === 1 ? 0 : 1;          \n        }\n      });\n    });\n\n    return inverseSpriteData;\n  }\n\n  /**\n   * Returns the spriteData of the sprite.\n   * @returns {SpriteData} spriteData.\n   */\n  get spriteData():SpriteData { return this._spriteData; }\n\n  /**\n   * Sets the sprite data of the sprite\n   * @param {SpriteData} a New sprite data.\n   */\n  set spriteData(a) { this._spriteData = a; }\n\n  /**\n   * Returns if the sprite is precise.\n   * @returns {boolean} Sprite is precise.\n   */\n  get precise():boolean { return this._precise; }\n\n  set precise(a:boolean) { this._precise = a; }\n\n  /**\n   * Returns the width of the sprite.\n   * @returns {number} Sprite width.\n   */\n  get width():number { return this._width; }\n\n  set width(a) { throw new Error('Width is a readonly property.'); }\n\n  /**\n   * Returns the height of the sprite.\n   * @returns {number} Sprite height.\n   */\n  get height():number { return this._height; }\n\n  set height(a) { throw new Error('Height is a readonly property.'); }\n}","const lowerCaseAlpha:any = {\n  'a': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'b': [\n    [3, 0],\n    [1, 0, 1, 0],\n    [4],\n    [1, -2, 1],\n    [4]\n  ],\n  'c': [\n    [4],\n    [1, -3],\n    [1, -3],\n    [1, -3],\n    [4]\n  ],\n  'd': [\n    [3, 0],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [3, 0]\n  ],\n  'e': [\n    [4],\n    [1, -3],\n    [3, 0],\n    [1, -3],\n    [4]\n  ],\n  'f': [\n    [4],\n    [1, -3],\n    [3, 0],\n    [1, -3],\n    [1, -3]\n  ],\n  'g': [\n    [4],\n    [1, -3],\n    [1, 0, 2],\n    [1, -2, 1],\n    [4]\n  ],\n  'h': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [4],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'i': [\n    [3],\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 0],\n    [3]\n  ],\n  'j': [\n    [0, 3],\n    [-2, 1, 0],\n    [-2, 1, 0],\n    [1, 0, 1, 0],\n    [3, 0]\n  ],\n  'k': [\n    [1, -2, 1],\n    [1, 0, 1, 0],\n    [2, 0, 0],\n    [1, 0, 1, 0],\n    [1, -2, 1]\n  ],\n  'l': [\n    [1, -3],\n    [1, -3],\n    [1, -3],\n    [1, -3],\n    [4]\n  ],\n  'm': [\n    [1, -2, 1],\n    [4],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'n': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [2, 0, 1],\n    [1, 0, 2],\n    [1, -2, 1]\n  ],\n  'o': [\n    [4],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [4]\n  ],\n  'p': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [1, -3],\n    [1, -3]\n  ],\n  'q': [\n    [4],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, 0, 2],\n    [4]\n  ],\n  'r': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [1, 0, 1, 0],\n    [1, -2, 1]\n  ],\n  's': [\n    [4],\n    [1, -3],\n    [4],\n    [-3, 1],\n    [4]\n  ],\n  't': [\n    [3],\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 0]\n  ],\n  'u': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [4]\n  ],\n  'v': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [0, 2, 0],\n    [0, 2, 0]\n  ],\n  'w': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [4],\n    [1, -2, 1]\n  ],\n  'x': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [0, 2, 0],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'y': [\n    [1, 0, 1],\n    [1, 0, 1],\n    [3],\n    [0, 1, 0],\n    [0, 1, 0]\n  ],\n  'z': [\n    [4],\n    [-3, 1],\n    [-2, 1, 0],\n    [0, 1, -2],\n    [4]\n  ]\n};\n\nconst upperCaseAlpha:any = {\n  'A': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'B': [\n    [3, 0],\n    [1, 0, 1, 0],\n    [4],\n    [1, -2, 1],\n    [4]\n  ],\n  'C': [\n    [4],\n    [1, -3],\n    [1, -3],\n    [1, -3],\n    [4]\n  ],\n  'D': [\n    [3, 0],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [3, 0]\n  ],\n  'E': [\n    [4],\n    [1, -3],\n    [3, 0],\n    [1, -3],\n    [4]\n  ],\n  'F': [\n    [4],\n    [1, -3],\n    [3, 0],\n    [1, -3],\n    [1, -3]\n  ],\n  'G': [\n    [4],\n    [1, -3],\n    [1, 0, 2],\n    [1, -2, 1],\n    [4]\n  ],\n  'H': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [4],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'I': [\n    [3],\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 0],\n    [3]\n  ],\n  'J': [\n    [0, 3],\n    [-2, 1, 0],\n    [-2, 1, 0],\n    [1, 0, 1, 0],\n    [3, 0]\n  ],\n  'K': [\n    [1, -2, 1],\n    [1, 0, 1, 0],\n    [2, 0, 0],\n    [1, 0, 1, 0],\n    [1, -2, 1]\n  ],\n  'L': [\n    [1, -3],\n    [1, -3],\n    [1, -3],\n    [1, -3],\n    [4]\n  ],\n  'M': [\n    [1, -2, 1],\n    [4],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'N': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [2, 0, 1],\n    [1, 0, 2],\n    [1, -2, 1]\n  ],\n  'O': [\n    [4],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [4]\n  ],\n  'P': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [1, -3],\n    [1, -3]\n  ],\n  'Q': [\n    [4],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, 0, 2],\n    [4]\n  ],\n  'R': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [1, 0, 1, 0],\n    [1, -2, 1]\n  ],\n  'S': [\n    [4],\n    [1, -3],\n    [4],\n    [-3, 1],\n    [4]\n  ],\n  'T': [\n    [3],\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 0]\n  ],\n  'U': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [4]\n  ],\n  'V': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [0, 2, 0],\n    [0, 2, 0]\n  ],\n  'W': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [4],\n    [1, -2, 1]\n  ],\n  'X': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [0, 2, 0],\n    [1, -2, 1],\n    [1, -2, 1]\n  ],\n  'Y': [\n    [1, 0, 1],\n    [1, 0, 1],\n    [3],\n    [0, 1, 0],\n    [0, 1, 0]\n  ],\n  'Z': [\n    [4],\n    [-3, 1],\n    [-2, 1, 0],\n    [0, 1, -2],\n    [4]\n  ]\n};\n\nconst numbers:any = {\n  '0': [\n    [0, 2, 0],\n    [1, -2, 1],\n    [1, -2, 1],\n    [1, -2, 1],\n    [0, 2, 0]\n  ],\n  '1': [\n    [0, 1, 0],\n    [2, 0],\n    [0, 1, 0],\n    [0, 1, 0],\n    [3]\n  ],\n  '2': [\n    [0, 2, 0],\n    [1, -2, 1],\n    [-2, 1, 0],\n    [0, 1, -2],\n    [4]\n  ],\n  '3': [\n    [4],\n    [-3, 1],\n    [0, 3],\n    [-3, 1],\n    [4]\n  ],\n  '4': [\n    [1, -2, 1],\n    [1, -2, 1],\n    [4],\n    [-3, 1],\n    [-3, 1]\n  ],\n  '5': [\n    [4],\n    [1, -3],\n    [3, 0],\n    [-3, 1],\n    [4]\n  ],\n  '6': [\n    [4],\n    [1, -3],\n    [4],\n    [1, -2, 1],\n    [4]\n  ],\n  '7': [\n    [4],\n    [-3, 1],\n    [-3, 1],\n    [-3, 1],\n    [-3, 1]\n  ],\n  '8': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [1, -2, 1],\n    [4]\n  ],\n  '9': [\n    [4],\n    [1, -2, 1],\n    [4],\n    [-3, 1],\n    [-3, 1]\n  ]\n};\n\nconst symbols:any = {\n  ' ': [\n    [-3],\n    [-3],\n    [-3],\n    [-3],\n    [-3]\n  ],\n  ',': [\n    [-2],\n    [-2],\n    [-2],\n    [0, 1],\n    [2]\n  ],\n  '.': [\n    [0],\n    [0],\n    [0],\n    [0],\n    [1]\n  ],\n  '/': [\n    [-3, 1],\n    [-2, 2],\n    [0, 2, -1],\n    [2, -2],\n    [1, -3]\n  ],\n  ';': [\n    [-2],\n    [0, 1],\n    [-2],\n    [0, 1],\n    [1, 0]\n  ],\n  '\\'': [\n    [1],\n    [1],\n    [0],\n    [0],\n    [0]\n  ],\n  '[': [\n    [2],\n    [1, 0],\n    [1, 0],\n    [1, 0],\n    [2]\n  ],\n  ']': [\n    [2],\n    [0, 1],\n    [0, 1],\n    [0, 1],\n    [2]\n  ],\n  '\\\\': [\n    [1, -3],\n    [2, -2],\n    [0, 2, -1],\n    [-2, 2],\n    [-3, 1]\n  ],\n  '-': [\n    [-3],\n    [-3],\n    [3],\n    [-3],\n    [-3]\n  ],\n  '=': [\n    [-3],\n    [3],\n    [-3],\n    [3],\n    [-3]\n  ],\n  '<': [\n    [-2, 1],\n    [0, 1, 0],\n    [1, -2],\n    [0, 1, 0],\n    [-2, 1]\n  ],\n  '>': [\n    [1, -2],\n    [0, 1, 0],\n    [-2, 1],\n    [0, 1, 0],\n    [1, -2]\n  ],\n  '?': [\n    [0, 2, 0],\n    [1, -2, 1],\n    [-2, 1, 0],\n    [-4],\n    [-2, 1, 0]\n  ],\n  ':': [\n    [0],\n    [1],\n    [0],\n    [0],\n    [1]\n  ],\n  '\"': [\n    [1, 0, 1],\n    [1, 0, 1],\n    [-3],\n    [-3],\n    [-3]\n  ],\n  '{': [\n    [0, 2],\n    [0, 1, 0],\n    [1, -2],\n    [0, 1, 0],\n    [0, 2]\n  ],\n  '}': [\n    [2, 0],\n    [0, 1, 0],\n    [-2, 1],\n    [0, 1, 0],\n    [2, 0]\n  ],\n  '|': [\n    [1],\n    [1],\n    [1],\n    [1],\n    [1]\n  ],\n  '!': [\n    [1],\n    [1],\n    [1],\n    [0],\n    [1]\n  ],\n  '@': [\n    [0, 2, 0],\n    [1, -2, 1],\n    [1, 0, 2],\n    [1, -3],\n    [0, 2, 0]\n  ],\n   '#': [\n     [0, 1, 0, 1],\n     [4],\n     [0, 1, 0, 1],\n     [4],\n     [0, 1, 0, 1]\n   ],\n   '$': [\n     [0, 1, 0],\n     [3],\n     [2, 0],\n     [0, 2],\n     [3]\n   ],\n   '%': [\n     [1, -2, 1],\n     [-2, 2],\n     [0, 2, -1],\n     [2, -2],\n     [1, -2, 1]\n   ],\n   '^': [\n     [0, 1, 0],\n     [1, 0, 1],\n     [-3],\n     [-3],\n     [-3]\n   ],\n   '&': [\n     [3, 0],\n     [1, 0, 1, 0],\n     [2, 0, 1],\n     [1, 0, 1, 0],\n     [0, 1, 0, 1]\n   ],\n   '*': [\n     [-3],\n     [1, 0, 1],\n     [0, 1, 0],\n     [1, 0, 1],\n     [-3]\n   ],\n   '(': [\n    [0, 1],\n    [1, 0],\n    [1, 0],\n    [1, 0],\n    [0, 1]\n  ],\n  ')': [\n    [1, 0],\n    [0, 1],\n    [0, 1],\n    [0, 1],\n    [1, 0]\n  ],\n  '_': [\n    [-3],\n    [-3],\n    [-3],\n    [-3],\n    [3]\n  ],\n  '+': [\n    [-3],\n    [0, 1, 0],\n    [3],\n    [0, 1, 0],\n    [-3]\n  ],\n  '`': [\n    [1, 0],\n    [0, 1],\n    [-2],\n    [-2],\n    [-2]\n  ],\n  '~': [\n    [-4],\n    [0, 1, 0, 1],\n    [1, 0, 1, 0],\n    [-4],\n    [-4]\n  ]\n};\n\nexport const defaultCharacterMap:any = {\n  options: {\n    spacing: 1\n  },\n  characters: {\n    ...lowerCaseAlpha,\n    ...upperCaseAlpha,\n    ...numbers,\n    ...symbols\n  }\n};","export * from './Sprite';\nexport * from './spriteData.interface';\nexport * from './defaultCharacterMap';","import { Graphics } from '../graphics';\n\n/**\n * Represents the default options for every game object.\n */\nexport const defaultGameObjectOptions:any = {\n  x: 0, // The starting X position of the game object on the board.\n  y: 0, // The starting Y position of the game object on the board.\n  sprite: undefined, // The sprite that belongs to the game object.\n  init: function(){}, // Function to call when the game object is first added to the game board and is passed an instance id.\n  update: function(){}, // Function to call every game frame and is passed an instance id.\n  \n  // Function that is called at the end of every game frame, and\n  // is passed instance id and a reference to the graphics class.\n  draw: function(id:number, graphics: Graphics) {\n    if (this._sprite) {\n      graphics.drawSprite(this._sprite, this._x, this._y);\n    }\n  },\n  destroy: function(){} // Function to call when the game object is removed from the board.\n}","/**\n * Represents the default options every game has.\n */\nexport const defaultGameOptions:any = {\n  width: 15, // Width of the game board\n  height: 15, // Height of the game board\n  collapse: false, // Collapse the space between checkboxes\n  hideCursor: false, // Hide the cursor over the gameboard\n  useRadio: false, // Use radio inputs instead of checkboxes\n  update: function(){} // Callback function that triggers at the start of every game loop\n}","/**\n * Returns the true position of an element.\n * @param {Element} e Element to get the position of. \n */\nexport function getElementPosition(e:any):any {\n  let curLeft = 0,\n      curTop = 0;\n\n  do {\n    curLeft += e.offsetLeft;\n    curTop += e.offsetTop;\n  } while (e = e.offsetParent);\n\n  return {\n    left: curLeft,\n    top: curTop\n  };\n}","export * from './defaultGameOptions';\nexport * from './defaultGameObjectOptions';\nexport * from './getElementPosition';","import './requestAnimationFrame';","// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel\n\n// MIT license\n\ndeclare var global:any;\n\nvar lastTime = 0;\nvar vendors = ['ms', 'moz', 'webkit', 'o'];\nfor(var x = 0; x < vendors.length && !global.requestAnimationFrame; ++x) {\n    global.requestAnimationFrame = global[vendors[x]+'RequestAnimationFrame'];\n    global.cancelAnimationFrame = global[vendors[x]+'CancelAnimationFrame'] \n                                || global[vendors[x]+'CancelRequestAnimationFrame'];\n}\n\nif (!global.requestAnimationFrame)\n    global.requestAnimationFrame = function(callback:any, element:any) {\n        var currTime = new Date().getTime();\n        var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n        var id = global.setTimeout(function() { callback(currTime + timeToCall); }, \n            timeToCall);\n        lastTime = currTime + timeToCall;\n        return id;\n    };\n\nif (!global.cancelAnimationFrame)\n    global.cancelAnimationFrame = function(id:any) {\n        clearTimeout(id);\n    };"]}